{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Documents/GitHub/goit-react-hw-06-phonebook/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Phonebook from './components/Phonebook/Phonebook';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, deleteContact, changeFilter } from './redux/slices/items'; // console.log(addContact)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const contactsItems = useSelector(state => state.contacts);\n  const contactsFilter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  console.log(contactsItems);\n  console.log(contactsFilter); // const mounted = useRef(false)\n  // const [contacts, setContacts] = useState([])\n\n  const [filter, setFilter] = useState('');\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState(''); // useEffect(() => {\n  //   if (!mounted.current) {\n  //     mounted.current = true\n  //     return\n  //   }\n  //   localStorage.setItem('contacts', JSON.stringify(contacts))\n  // }, [contacts])\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem('contacts')\n  //   const parsedContacts = JSON.parse(contacts)\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts)\n  //   }\n  // }, [])\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      case 'filter':\n        // setFilter(value)\n        dispatch(changeFilter(value));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const randomId = uuidv4(); // const checkName = contacts.map((contact) => contact.name).includes(name)\n    // const checkNumber = contacts\n    //   .map((contact) => contact.number)\n    //   .includes(number)\n    // if (checkName) {\n    //   alert(`${name} is already in contacts`)\n    // } else if (checkNumber) {\n    //   alert(`Number ${number} is already in contacts`)\n    // } else {\n    //   setContacts([...contacts, { id: randomId, name: name, number: number }])\n    // }\n\n    dispatch(addContact({\n      id: randomId,\n      name,\n      number\n    }));\n    eraseInputs();\n  };\n\n  const eraseInputs = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const removeContact = id => {\n    // setContacts((prevState) => prevState.filter(({ id }) => id !== contactId))\n    dispatch(deleteContact(id));\n  };\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contactsItems.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Phonebook, {\n      onSubmit: handleSubmit,\n      onChange: handleChange,\n      name: name,\n      number: number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      filter: contactsFilter,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Contacts, {\n      contactsData: visibleContacts(),\n      onDeleteContact: removeContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"MDg7yPzKwEQF1xhVu3TcbvQCyYY=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/andres/Documents/GitHub/goit-react-hw-06-phonebook/src/App.jsx"],"names":["React","useState","useEffect","useRef","Phonebook","Contacts","Filter","v4","uuidv4","useDispatch","useSelector","addContact","deleteContact","changeFilter","App","contactsItems","state","contacts","contactsFilter","filter","dispatch","console","log","setFilter","name","setName","number","setNumber","handleChange","e","value","target","handleSubmit","preventDefault","randomId","id","eraseInputs","removeContact","visibleContacts","normalizedFilter","toLowerCase","contact","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Phonebook from './components/Phonebook/Phonebook'\nimport Contacts from './components/Contacts/Contacts'\nimport Filter from './components/Filter/Filter'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addContact, deleteContact, changeFilter } from './redux/slices/items'\n\n// console.log(addContact)\n\nfunction App() {\n  const contactsItems = useSelector((state) => state.contacts)\n  const contactsFilter = useSelector((state) => state.filter)\n  const dispatch = useDispatch()\n  console.log(contactsItems)\n  console.log(contactsFilter)\n\n  // const mounted = useRef(false)\n  // const [contacts, setContacts] = useState([])\n  const [filter, setFilter] = useState('')\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  // useEffect(() => {\n  //   if (!mounted.current) {\n  //     mounted.current = true\n  //     return\n  //   }\n  //   localStorage.setItem('contacts', JSON.stringify(contacts))\n  // }, [contacts])\n\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem('contacts')\n\n  //   const parsedContacts = JSON.parse(contacts)\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts)\n  //   }\n  // }, [])\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    switch (name) {\n      case 'name':\n        setName(value)\n        break\n      case 'number':\n        setNumber(value)\n        break\n      case 'filter':\n        // setFilter(value)\n        dispatch(changeFilter(value))\n        break\n\n      default:\n        break\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const randomId = uuidv4()\n    // const checkName = contacts.map((contact) => contact.name).includes(name)\n    // const checkNumber = contacts\n    //   .map((contact) => contact.number)\n    //   .includes(number)\n\n    // if (checkName) {\n    //   alert(`${name} is already in contacts`)\n    // } else if (checkNumber) {\n    //   alert(`Number ${number} is already in contacts`)\n    // } else {\n    //   setContacts([...contacts, { id: randomId, name: name, number: number }])\n    // }\n    dispatch(addContact({ id: randomId, name, number }))\n\n    eraseInputs()\n  }\n\n  const eraseInputs = () => {\n    setName('')\n    setNumber('')\n  }\n\n  const removeContact = (id) => {\n    // setContacts((prevState) => prevState.filter(({ id }) => id !== contactId))\n    dispatch(deleteContact(id))\n  }\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase()\n    return contactsItems.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    )\n  }\n\n  return (\n    <div>\n      <Phonebook\n        onSubmit={handleSubmit}\n        onChange={handleChange}\n        name={name}\n        number={number}\n      ></Phonebook>\n      <Filter filter={contactsFilter} onChange={handleChange}></Filter>\n      <Contacts\n        contactsData={visibleContacts()}\n        onDeleteContact={removeContact}\n      ></Contacts>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}