{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit'; // import { combineReducers } from 'redux'\n\nimport { contactsReducer } from '../slices/items';\nimport { filterReducer } from '../slices/filter'; // import items from '../slices/items'\n// const rootReducer = {\n//   items,\n// }\n\nconst contacts = localStorage.getItem('contacts');\nconst parsedContacts = JSON.parse(contacts);\n\nfunction checkStorage() {\n  if (!parsedContacts) return [];\n}\n\nconsole.log(checkStorage);\nexport const store = configureStore({\n  reducer: {\n    items: contactsReducer,\n    filter: filterReducer\n  },\n  // preloadedState: {\n  //   items: parsedContacts,\n  // },\n  devTools: process.env.NODE_ENV !== 'production'\n}); // console.log(localStorage.getItem('contact'))\n\nconsole.log(parsedContacts);","map":{"version":3,"sources":["/Users/andres/Documents/GitHub/goit-react-hw-06-phonebook/src/redux/store/store.js"],"names":["configureStore","contactsReducer","filterReducer","contacts","localStorage","getItem","parsedContacts","JSON","parse","checkStorage","console","log","store","reducer","items","filter","devTools","process","env","NODE_ENV"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B,C,CACA;;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;AAEA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB;AACA,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAvB;;AACA,SAASM,YAAT,GAAwB;AACtB,MAAI,CAACH,cAAL,EAAqB,OAAO,EAAP;AACtB;;AACDI,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,OAAO,MAAMG,KAAK,GAAGZ,cAAc,CAAC;AAClCa,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEb,eADA;AAEPc,IAAAA,MAAM,EAAEb;AAFD,GADyB;AAKlC;AACA;AACA;AACAc,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AARD,CAAD,CAA5B,C,CAWP;;AAEAT,OAAO,CAACC,GAAR,CAAYL,cAAZ","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\n// import { combineReducers } from 'redux'\nimport { contactsReducer } from '../slices/items'\nimport { filterReducer } from '../slices/filter'\n// import items from '../slices/items'\n\n// const rootReducer = {\n//   items,\n// }\nconst contacts = localStorage.getItem('contacts')\nconst parsedContacts = JSON.parse(contacts)\nfunction checkStorage() {\n  if (!parsedContacts) return []\n}\nconsole.log(checkStorage)\nexport const store = configureStore({\n  reducer: {\n    items: contactsReducer,\n    filter: filterReducer,\n  },\n  // preloadedState: {\n  //   items: parsedContacts,\n  // },\n  devTools: process.env.NODE_ENV !== 'production',\n})\n\n// console.log(localStorage.getItem('contact'))\n\nconsole.log(parsedContacts)\n"]},"metadata":{},"sourceType":"module"}