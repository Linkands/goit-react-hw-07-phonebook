{"ast":null,"code":"import{configureStore}from'@reduxjs/toolkit';// import { combineReducers } from 'redux'\nimport{contactsReducer}from'../slices/items';import{filterReducer}from'../slices/filter';// import items from '../slices/items'\n// const rootReducer = {\n//   items,\n// }\nvar contacts=localStorage.getItem('contacts');var parsedContacts=JSON.parse(contacts);function initializeStorage(){if(!parsedContacts){return[];}else{return parsedContacts;}}export var store=configureStore({reducer:{items:contactsReducer,filter:filterReducer},preloadedState:{items:initializeStorage()},devTools:process.env.NODE_ENV!=='production'});// console.log(localStorage.getItem('contact'))","map":{"version":3,"sources":["/Users/andres/Documents/GitHub/goit-react-hw-06-phonebook/src/redux/store/store.js"],"names":["configureStore","contactsReducer","filterReducer","contacts","localStorage","getItem","parsedContacts","JSON","parse","initializeStorage","store","reducer","items","filter","preloadedState","devTools","process","env","NODE_ENV"],"mappings":"AAAA,OAASA,cAAT,KAA+B,kBAA/B,CACA;AACA,OAASC,eAAT,KAAgC,iBAAhC,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA;AAEA;AACA;AACA;AACA,GAAMC,CAAAA,QAAQ,CAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB,CACA,GAAMC,CAAAA,cAAc,CAAGC,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAvB,CAEA,QAASM,CAAAA,iBAAT,EAA6B,CAC3B,GAAI,CAACH,cAAL,CAAqB,CACnB,MAAO,EAAP,CACD,CAFD,IAEO,CACL,MAAOA,CAAAA,cAAP,CACD,CACF,CAED,MAAO,IAAMI,CAAAA,KAAK,CAAGV,cAAc,CAAC,CAClCW,OAAO,CAAE,CACPC,KAAK,CAAEX,eADA,CAEPY,MAAM,CAAEX,aAFD,CADyB,CAKlCY,cAAc,CAAE,CACdF,KAAK,CAAEH,iBAAiB,EADV,CALkB,CAQlCM,QAAQ,CAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YARD,CAAD,CAA5B,CAWP","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\n// import { combineReducers } from 'redux'\nimport { contactsReducer } from '../slices/items'\nimport { filterReducer } from '../slices/filter'\n// import items from '../slices/items'\n\n// const rootReducer = {\n//   items,\n// }\nconst contacts = localStorage.getItem('contacts')\nconst parsedContacts = JSON.parse(contacts)\n\nfunction initializeStorage() {\n  if (!parsedContacts) {\n    return []\n  } else {\n    return parsedContacts\n  }\n}\n\nexport const store = configureStore({\n  reducer: {\n    items: contactsReducer,\n    filter: filterReducer,\n  },\n  preloadedState: {\n    items: initializeStorage(),\n  },\n  devTools: process.env.NODE_ENV !== 'production',\n})\n\n// console.log(localStorage.getItem('contact'))\n"]},"metadata":{},"sourceType":"module"}