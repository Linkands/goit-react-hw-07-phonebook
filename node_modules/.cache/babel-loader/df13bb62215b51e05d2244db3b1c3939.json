{"ast":null,"code":"import * as contactsActions from '../actions/contacts-actions';\nimport axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\naxios.defaults.baseURL = 'http://localhost:3000';\n\nasync function getContacts() {\n  const contacts = await axios.get(`/contacts`);\n  console.log(contacts.data);\n  return contacts.data;\n}\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const contacts = await getContacts();\n    dispatch(contactsActions.fetchContactsSuccess(contacts));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error));\n  }\n};","map":{"version":3,"sources":["/Users/andres/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/operations/contacts-operations.js"],"names":["contactsActions","axios","createAsyncThunk","defaults","baseURL","getContacts","contacts","get","console","log","data","fetchContacts","dispatch","fetchContactsRequest","fetchContactsSuccess","error","fetchContactsError"],"mappings":"AAAA,OAAO,KAAKA,eAAZ,MAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAEAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;;AAEA,eAAeC,WAAf,GAA6B;AAC3B,QAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,WAAX,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACA,SAAOJ,QAAQ,CAACI,IAAhB;AACD;;AAED,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrDA,EAAAA,QAAQ,CAACZ,eAAe,CAACa,oBAAhB,EAAD,CAAR;;AAEA,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMD,WAAW,EAAlC;AACAO,IAAAA,QAAQ,CAACZ,eAAe,CAACc,oBAAhB,CAAqCR,QAArC,CAAD,CAAR;AACD,GAHD,CAGE,OAAOS,KAAP,EAAc;AACdH,IAAAA,QAAQ,CAACZ,eAAe,CAACgB,kBAAhB,CAAmCD,KAAnC,CAAD,CAAR;AACD;AACF,CATM","sourcesContent":["import * as contactsActions from '../actions/contacts-actions'\nimport axios from 'axios'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\n\naxios.defaults.baseURL = 'http://localhost:3000'\n\nasync function getContacts() {\n  const contacts = await axios.get(`/contacts`)\n  console.log(contacts.data)\n  return contacts.data\n}\n\nexport const fetchContacts = () => async (dispatch) => {\n  dispatch(contactsActions.fetchContactsRequest())\n\n  try {\n    const contacts = await getContacts()\n    dispatch(contactsActions.fetchContactsSuccess(contacts))\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}